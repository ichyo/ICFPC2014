main(unvariable) {
    return 0;
}

get(idx, list){
    if(idx == 0) {
        return car(list);
    } else {
        return get(idx - 1, cdr(list));
    }
}

get2(x, y, list) {
    return get(x, get(y, list));
}

length(list) {
    if(atom(list)) {
        return 0;
    } else {
        return 1 + length(cdr(list));
    }
}

init_list(n, init) {
    if(n == 0) {
        return 0;
    } else {
        return (init, init_list(n - 1, init));
    }
}

set(idx, val, list){
    if(idx == 0) {
        return (val, cdr(list));
    } else {
        return (car(list), set(idx - 1, val, cdr(list)));
    }
}

set2(x, y, val, list) {
    set(y, set(x, val, get(y, list)), list);
}

min(x, y) {
    if(x < y) {
        return x;
    } else {
        return y;
    }
}

dfs(x, y, used, world, _res){
    if(x < 0) {
        return 1000000000;
    }
    if(y < 0) {
        return 1000000000;
    }
    if(x >= get_width(world)) {
        return 1000000000;
    }
    if(y >= get_width(world)) {
        return 1000000000;
    }
    if(get2(x, y, used) == 1) {
        return 1000000000;
    }
    if(get_cell(world, x, y) == 0) {
        return 1000000000;
    }
    if(get_cell(world, x, y) == 3) {
        return 0;
    }
    used = set2(x, y, 1, used);
    _res =           dfs(x + 1, y + 0, used, world, 0) ;
    _res = min(_res, dfs(x - 1, y + 0, used, world, 0));
    _res = min(_res, dfs(x + 0, y - 1, used, world, 0));
    _res = min(_res, dfs(x + 0, y + 1, used, world, 0));
    return _res;
}

get_cell(world, x, y) {
    return get2(x, y, get(0, world));
}

get_status(world) {
    return get(1, world);
}

get_lambda_loc(world){
    return get(1, get_status(world))
}

get_width(world) {
    return length(get(0, get(0, world)));
}

get_height(world) {
    return length(get(0, world));
}

next_seed(seed){
    return seed * 214013 + 2531011;
}

random(seed){
    return seed / 65536;
}

